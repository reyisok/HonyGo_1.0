[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "honygo"
version = "1.0.0"
description = "HonyGo System - Experimental Automation Tool with OCR capabilities"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE.txt"}
authors = [
    {name = "Mr.Rey", email = "mr.rey@example.com"},
]
maintainers = [
    {name = "Mr.Rey", email = "mr.rey@example.com"},
]
keywords = [
    "automation",
    "ocr",
    "gui",
    "pyside6",
    "image-processing",
    "mouse-automation",
    "text-recognition"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Environment :: Win32 (MS Windows)"
]
dependencies = [
    # GUI框架
    "PySide6>=6.6.0",
    
    # 图像处理
    "Pillow>=10.0.0",
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    
    # OCR相关
    "easyocr>=1.7.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "tensorflow>=2.13.0",
    
    # GPU监控和加速
    "nvidia-ml-py>=12.535.0",
    "pynvml>=11.5.0",
    "GPUtil>=1.4.0",
    
    # 网络和API
    "requests>=2.31.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "urllib3>=2.0.0",
    
    # 系统交互
    "psutil>=5.9.0",
    "pyautogui>=0.9.54",
    "pynput>=1.7.6",
    "pywin32>=306",
    
    # 任务调度
    "schedule>=1.2.0",
    
    # 配置和验证
    "pyyaml>=6.0",
    "jsonschema>=4.17.0",
    
    # 日志和监控
    "coloredlogs>=15.0",
    
    # 包管理和元数据
    "importlib-metadata>=6.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "isort>=5.12.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]

[project.scripts]
honygo = "src.ui.main:main"
honygo-start = "start_honygo:main"

[project.urls]
Homepage = "https://github.com/mrrey/honygo"
Repository = "https://github.com/mrrey/honygo.git"
Documentation = "https://github.com/mrrey/honygo/tree/main/docs"
"Bug Tracker" = "https://github.com/mrrey/honygo/issues"
"Changelog" = "https://github.com/mrrey/honygo/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["src"]
include = ["src*"]
exclude = ["tests*", "zetc*", ".trae*"]

[tool.setuptools.package-data]
"src.config" = ["*.json", "*.yaml", "*.yml"]
"src.core.ocr.third_party.ocr" = ["**/*"]
"src.ui.resources" = ["**/*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | zetc
    | \.trae
  )/
)
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "zetc",
    ".trae"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "easyocr.*",
    "cv2.*",
    "torch.*",
    "torchvision.*",
    "tensorflow.*",
    "nvidia_ml_py.*",
    "pyautogui.*",
    "pynput.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
    "ocr: marks tests as OCR related tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/zetc/*",
    "*/.trae/*",
    "*/data/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["zetc/*", ".trae/*"]

[tool.bandit]
exclude_dirs = ["tests", "zetc", ".trae"]
skips = ["B101", "B601"]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0111",  # Missing docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-parents = 10
max-attributes = 15
min-public-methods = 1
max-public-methods = 25
max-bool-expr = 8

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "zetc",
    ".trae"
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["src"]